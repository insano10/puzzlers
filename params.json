{"name":"Puzzlers","tagline":"A collection of solutions to common algorithms and interesting puzzles","body":"# Puzzlers\r\n\r\nThis is a collection of various algorithms and puzzles that I have come across over the years that are interesting/useful enough to keep note of.\r\nThey have been implemented in Java.\r\n\r\nNote: The implementations here are by no means the best or most elegant solutions, just what I have come up with.\r\n\r\n## Algorithms\r\n\r\n* Strings\r\n  1. Determine if a string has all unique characters\r\n  1. Determine if a string has all unique characters (without using additional data structures)\r\n  1. Reverse a string\r\n  1. Reverse a C-style string\r\n  1. Is a string an anagram of another\r\n* Arrays\r\n  1. Rotate an NxN 2D array by 90 degrees\r\n  1. Rotate an NxM 2D array by 90 degrees\r\n  1. Traverse an NxN 2D array in a spiral pattern\r\n  1. Traverse an NxM 2D array in a spiral pattern\r\n* Sorting\r\n  1. QuickSort (using additional data structures)\r\n  1. QuickSort (using ArrayLists instead of arrays)\r\n  1. QuickSort (in place, without additional data structures)\r\n  1. HeapSort\r\n  1. ExternalSort\r\n  1. MergeSort\r\n  1. InsertionSort\r\n* Linked Lists\r\n  1. Add/Remove/Get\r\n  1. Remove duplicate elements\r\n  1. Remove duplicate elements (without using additional data structures)\r\n  1. Sort\r\n* Sets\r\n  1. Write an algorithm to to generate the powerset of any given set\r\n    * implement recursively\r\n    * implement iteratively\r\n    * implement using a binary string\r\n* Heaps\r\n  1. Implement a min-heap\r\n  2. Implement a max-heap\r\n* Graphs\r\n  1. Represent a graph using Node/Edge objects\r\n  1. Represent a graph using an adjacency matrix\r\n  1. Depth first search\r\n    * recursively\r\n    * iteratively\r\n  1. Breadth first search\r\n  1. Dijkstra's algorithm\r\n  1. Algorithm to decide whether you can 2-colour a graph\r\n  1. Implement a brute force solution to a 5 node travelling salesman problem\r\n* HashTable\r\n  1. Implement HashTable\r\n* Trees\r\n  1. Binary Tree\r\n    * PreOrder, InOrder, PostOrder traversal using recursion\r\n    * PreOrder, InOrder, PostOrder traversal using iteration\r\n  1. Trie\r\n    * insert Strings and validate their existence like a dictionary\r\n    * find smaller words inside a given String \r\n    * retrieve words in sorted order using pre order traversal of the tree\r\n  1. Red Black Trees\r\n* Big Data\r\n  1. Count the number of times a word occurs in a file using map reduce\r\n  1. Calculate the powerset of an arbitrarily large set using map reduce\r\n* Encoding\r\n  1. Base64 encode/decode a string\r\n\r\n## Puzzles\r\n\r\n* Solutions to the excellent puzzles posted by Wouter Coekaerts at http://wouter.coekaerts.be/puzzles\r\n  1. Fit 20 clowns into a 5 seat Volkswagen\r\n  1. Am I still dreaming?\r\n* Given a set of meetings find the amount of time someone spends in a meeting that conflicts with others\r\n* Find the running median of a stream of Integers\r\n* Given a 10x10 grid, a guy on one space, his house on another and some obstacles on the grid, find the shortest path home\r\n* Given an unordered stack of boarding passes with start and end destinations, find the overall start and destination of the whole journey","google":"UA-66016638-4","note":"Don't delete this file! It's used internally to help with page regeneration."}